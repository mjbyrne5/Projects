# Designed for use as a virtual call center to mimic real world use

import random
import pandas as pd
import numpy as np

Count = 0
Results = []
TotalWasteTime = []

while Count != 10:
    df = pd.read_csv("/Users/michaelbyrne/Desktop/Career/OfficialTestData.csv")

    N11 = ['Null Grade Day 1 Attempt 1']
    B12 = ['B Through High Fico Leads Day 1 Attempt 1']
    C11 = ['C Leads Day 1 Attempt 1']
    SH = ['Super Hot Lead']
    N22 = ['Null Grade Day 2 Attempt 2']
    B51 = ['B Through High Fico Leads Day 5 Attempt 1']
    SHT = ['Super Hot Third Party Leads']
    B11 = ['B Through High Fico Leads Day 1 Attempt 1']
    SH2 = ['Super Hot Second Pass']
    B21 = ['B Through High Fico Leads Day 2 Attempt 1']
    B22 = ['B Through High Fico Leads Day 2 Attempt 2']
    C21 = ['C Leads Day 2 Attempt 1']
    C22 = ['C Leads Day 2 Attempt 2']
    N21 = ['Null Grade Day 2 Attempt 1']
    C12 = ['C Leads Day 1 Attempt 2']
    N12 = ['Null Grade Day 1 Attempt 2']
    zeros = ['0']
    Unknown = ['1']

    TopStrategies = [] #'Super Hot Lead'] # , 'Super Hot Second Pass'] #, 'B Through High Fico Leads Day 1 Attempt 1'] #,
                     #  'Super Hot Third Party Leads']  #, 'B Through High Fico Leads Day 1 Attempt 2']   #,
                                        #  'B Through High Fico Leads Day 2 Attempt 1']

    CallList = N11*120 + B12*119 + C11*79 + SH*1297 + N22*15 + B51*15 + SHT*47 + B11*309 + SH2*373 + B21*143 + \
               B22*64 + C21*41 + C22*9 + N21*70 + C12*20 + N12*60 + Unknown*1349 + zeros*24670


    # Real World Data
    Agents = df['FIRSTEMPLOYEENAME'].tolist()
    StrategyName = df['STRATEGYNAME'].tolist()
    AgentEVOfCall = df['EVOFCALL'].tolist()
    AvgEV = df['EVOFCALLOVERALL'].tolist()

    # Simulation Data
    AgentBusy = np.zeros(len(Agents))  # tracks available agents relative to avg sale time
    SaleTime = df['AVGSALETIME'].tolist()

    TotalProfit = 0
    Caught = []  # Delete
    TimeWasted = 0  # Delete
    AgentUseTracker = []

    for i in Agents:
        if i not in AgentUseTracker:
            AgentUseTracker.append(i)

    while len(CallList) > 0:

        CurrentEV = 0
        CurrentAgent = 'Null'
        CurrentCall = random.choice(CallList)
        CallList.remove(CurrentCall)

        if CurrentCall != '0':
            # Random assignment for unknowns
            if CurrentCall == '1':
                CurrentCall = random.choice(StrategyName)

            if CurrentCall not in TopStrategies and CurrentAgent == 'Null':
                while 0 not in AgentBusy:
                    for i in range(0, len(AgentBusy)):
                        if AgentBusy[i] > 0:
                            AgentBusy[i] -= 1
                    TimeWasted += 1
                while CurrentAgent == 'Null':
                    j = random.randint(0, len(Agents) - 1)
                    if CurrentCall == StrategyName[j] and AgentBusy[j] == 0:
                        CurrentAgent = Agents[j]
                        CurrentEV = float(AgentEVOfCall[j])

            if CurrentCall in TopStrategies:
                while 0 not in AgentBusy:
                    for i in range(0, len(AgentBusy)):
                        if AgentBusy[i] > 0:
                            AgentBusy[i] -= 1
                    TimeWasted += 1
                for i in range(0, len(Agents)):
                    if CurrentCall == StrategyName[i] and AgentBusy[i] == 0:
                        if float(AgentEVOfCall[i]) > float(CurrentEV):
                            CurrentAgent = Agents[i]
                            CurrentEV = float(AgentEVOfCall[i])

            # Fail Safe if no agent assigned
            fail = True
            while CurrentAgent == 'Null':
                if fail:
                    Caught.append(f"Failsafe Activated: {CurrentCall}")
                    fail = False
                # Assign first available agent
                for i in range(0, len(Agents)):
                    if AgentBusy[i] == 0 and CurrentAgent == 'Null':
                        CurrentAgent = Agents[i]
                        CurrentEV = 0
                # Adjust time if no agents available and restart
                if CurrentAgent == 'Null':
                    for i in range(0, len(AgentBusy)):
                        if AgentBusy[i] > 0:
                            AgentBusy[i] -= 1
                    TimeWasted += 1

            # Sale Report
            print("---------------------------------------------------------------")
            print(f'Time Passed In Hours: {(28800 - len(CallList)) / 3600}')
            print(f'Current Call Strategy: {CurrentCall}')
            print(f'Agent Assigned: {CurrentAgent}')
            print(f'EV Of Call: {CurrentEV}')

            # Set selected agent to busy for average sale time plus lull
            for i in range(0, len(AgentBusy)):
                if Agents[i] == CurrentAgent:
                    AgentBusy[i] = round(SaleTime[i]) + 31

            # Add EV of call to total daily profit
            TotalProfit += CurrentEV

        # Subtract passed time from busy agents
        for i in range(0, len(AgentBusy)):
            if AgentBusy[i] > 0:
                AgentBusy[i] -= 1

        # Check for errors
        if CurrentCall not in StrategyName and not '0':  # Delete
            Caught.append('Strategy Unlisted')
        if CurrentAgent == 'null':
            if CurrentCall != '0':
                Caught.append('Agent still null')
        BusyTrack = True
        for i in AgentBusy:
            if i == 0:
                BusyTrack = False
        if BusyTrack:
            if 'Agents all busy' not in Caught:
                Caught.append('Agents all busy')
        if CurrentEV < 0:
            if 'Negative EV used' not in Caught:
                Caught.append('Negative EV used')
        for i in AgentUseTracker:
            if i == CurrentAgent:
                AgentUseTracker.remove(i)
    if len(AgentUseTracker) > 0:
        Caught.append(f'Agents unused: {AgentUseTracker}')

    # Final Report
    print("---------------------------------------------------------------")
    print(f'Total profit: {TotalProfit}')
    print(f'Errors:{Caught}')  # Delete
    print(f'Time wasted with no available agents: {TimeWasted}')


    Results.append(TotalProfit)
    TotalWasteTime.append(TimeWasted)
    Count += 1


print("---------------------------------------------------------------")
print(Results)
print(f'Average Profit: {sum(Results)/10}')
print(f'Average wasted time: {sum(TotalWasteTime)/10}')
